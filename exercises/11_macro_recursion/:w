macro_rules! curry_unwrapper {
    ($block:block) => {
        $block
    };
    (
        $argname:ident: $argtype:ty,
        $($argnames:ident: $argtypes:ty,)*
        $block:block
    ) => {
        move |$argname : $argtype | {
            curry_unwrapper!($($argnames: $argtypes,)* $block)
        }
    }
}

macro_rules! curry_fn {
    (
        $ident:tt, => $restype:ty, $block:block
    ) => {
        $block
    };
    (
        $ident:tt,
        ($argname:ident: $argtype:ty)
            -> $(($argnames:ident: $argtypes:ty))->*
            => $restype:ty, $block:block
    ) => {
        fn $ident($argname: $argtype) -> $(fn($argtypes) ->)* $restype {
            curry_fn!($argname, $(($argnames: $argtypes) ->)* => $restype, $block);
            $argname
        }
    };
}

fn main() {
    curry_fn!(add, (a: i32) -> (b: i32) => i32, {
        a + b
    });

    let res = add(3)(2);


    println!("{res}");
}
